{
  
    
        "post0": {
            "title": "Chaper 3 Deep-learning with python",
            "content": "# here’s a two-layer model defined using the Sequential class from keras import models from keras import layers model = models.Sequential() model.add(layers.Dense(32, activation=&#39;relu&#39;, input_shape=(784,))) model.add(layers.Dense(10, activation=&#39;softmax&#39;)) . # same model as above model using functional API input_tensor = layers.Input(shape=(784,)) x = layers.Dense(32, activation=&#39;relu&#39;)(input_tensor) output_tensor = layers.Dense(10, activation=&#39;softmax&#39;)(x) model = models.Model(inputs=input_tensor, outputs=output_tensor) # more functional API info in chapter 7. . from keras import optimizers model.compile(optimizer=optimizers.RMSprop(lr=0.001), loss=&#39;mse&#39;, metrics=[&#39;accuracy&#39;]) . model.fit(input_tensor, target_tensor, batch_size=128, epochs=10) . NameError Traceback (most recent call last) &lt;ipython-input-7-c17b2397d844&gt; in &lt;module&gt; -&gt; 1 model.fit(input_tensor, target_tensor, batch_size=128, epochs=10) NameError: name &#39;target_tensor&#39; is not defined . from keras.datasets import imdb (train_data, train_labels), (test_data, test_labels) = imdb.load_data( num_words=10000) . Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/imdb.npz 17465344/17464789 [==============================] - 4s 0us/step . train_data[0] . [1, 14, 22, 16, 43, 530, 973, 1622, 1385, 65, 458, 4468, 66, 3941, 4, 173, 36, 256, 5, 25, 100, 43, 838, 112, 50, 670, 2, 9, 35, 480, 284, 5, 150, 4, 172, 112, 167, 2, 336, 385, 39, 4, 172, 4536, 1111, 17, 546, 38, 13, 447, 4, 192, 50, 16, 6, 147, 2025, 19, 14, 22, 4, 1920, 4613, 469, 4, 22, 71, 87, 12, 16, 43, 530, 38, 76, 15, 13, 1247, 4, 22, 17, 515, 17, 12, 16, 626, 18, 2, 5, 62, 386, 12, 8, 316, 8, 106, 5, 4, 2223, 5244, 16, 480, 66, 3785, 33, 4, 130, 12, 16, 38, 619, 5, 25, 124, 51, 36, 135, 48, 25, 1415, 33, 6, 22, 12, 215, 28, 77, 52, 5, 14, 407, 16, 82, 2, 8, 4, 107, 117, 5952, 15, 256, 4, 2, 7, 3766, 5, 723, 36, 71, 43, 530, 476, 26, 400, 317, 46, 7, 4, 2, 1029, 13, 104, 88, 4, 381, 15, 297, 98, 32, 2071, 56, 26, 141, 6, 194, 7486, 18, 4, 226, 22, 21, 134, 476, 26, 480, 5, 144, 30, 5535, 18, 51, 36, 28, 224, 92, 25, 104, 4, 226, 65, 16, 38, 1334, 88, 12, 16, 283, 5, 16, 4472, 113, 103, 32, 15, 16, 5345, 19, 178, 32] . train_labels[0] . 1 . max([max(sequence) for sequence in train_data]) . 9999 . word_index = imdb.get_word_index() reverse_word_index = dict( [(value, key) for (key, value) in word_index.items()]) decoded_review = &#39; &#39;.join( [reverse_word_index.get(i - 3, &#39;?&#39;) for i in train_data[0]]) . Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/imdb_word_index.json 1646592/1641221 [==============================] - 0s 0us/step . # Encoding the integer sequences into a binary matrix import numpy as np def vectorize_sequences(sequences, dimension=10000): results = np.zeros((len(sequences), dimension)) for i, sequence in enumerate(sequences): results[i, sequence] = 1. return results x_train = vectorize_sequences(train_data) x_test = vectorize_sequences(test_data) . # Here’s what the samples look like now: x_train[0] . array([0., 1., 1., ..., 0., 0., 0.]) . y_train = np.asarray(train_labels).astype(&#39;float32&#39;) y_test = np.asarray(test_labels).astype(&#39;float32&#39;) .",
            "url": "https://der0pa.github.io/Machine-Learning/Machine-Learning/pytorch%20deep-learning/2020/07/22/back-to-work.html",
            "relUrl": "/pytorch%20deep-learning/2020/07/22/back-to-work.html",
            "date": " • Jul 22, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Do a little TorchScript",
            "content": "import torch torch.__version__ . &#39;1.6.0&#39; . # create a class that subclass torch.nn.Module class MyCell(torch.nn.Module): def __init__(self): super(MyCell, self).__init__() def forward(self, x, h): new_h = torch.tanh(x + h) return new_h, new_h my_cell = MyCell() x = torch.rand(3, 4) h = torch.rand(3, 4) print(my_cell(x, h)) . (tensor([[0.5667, 0.6928, 0.7958, 0.3886], [0.4439, 0.9214, 0.8213, 0.8108], [0.1452, 0.7688, 0.0619, 0.9099]]), tensor([[0.5667, 0.6928, 0.7958, 0.3886], [0.4439, 0.9214, 0.8213, 0.8108], [0.1452, 0.7688, 0.0619, 0.9099]])) . class MyCell(torch.nn.Module): def __init__(self): super(MyCell, self).__init__() self.linear = torch.nn.Linear(4, 4) def forward(self, x, h): new_h = torch.tanh(self.linear(x) + h) return new_h, new_h my_cell = MyCell() print(my_cell) print(my_cell(x, h)) . MyCell( (linear): Linear(in_features=4, out_features=4, bias=True) ) (tensor([[ 0.6600, 0.6756, -0.0741, 0.3412], [ 0.5249, 0.8791, 0.0447, 0.7786], [ 0.4978, 0.7771, -0.2056, 0.7018]], grad_fn=&lt;TanhBackward&gt;), tensor([[ 0.6600, 0.6756, -0.0741, 0.3412], [ 0.5249, 0.8791, 0.0447, 0.7786], [ 0.4978, 0.7771, -0.2056, 0.7018]], grad_fn=&lt;TanhBackward&gt;)) .",
            "url": "https://der0pa.github.io/Machine-Learning/Machine-Learning/jupyter/2020/07/22/TorchScript-intro.html",
            "relUrl": "/jupyter/2020/07/22/TorchScript-intro.html",
            "date": " • Jul 22, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "How is your day going?",
            "content": "",
            "url": "https://der0pa.github.io/Machine-Learning/Machine-Learning/deepthoughts/2020/07/19/How-is-your-day-going.html",
            "relUrl": "/deepthoughts/2020/07/19/How-is-your-day-going.html",
            "date": " • Jul 19, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Title",
            "content": "# Setup top cell template &gt; An initial first cell configuration. - toc: true - badges: true - comments: true - categories: [jupyter] - image: images/chart-preview.png",
            "url": "https://der0pa.github.io/Machine-Learning/Machine-Learning/2020/07/19/Basic-Fastbook-setup.html",
            "relUrl": "/2020/07/19/Basic-Fastbook-setup.html",
            "date": " • Jul 19, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Tomorrow today",
            "content": "",
            "url": "https://der0pa.github.io/Machine-Learning/Machine-Learning/backtothefuture/2020/07/18/tomorrow.html",
            "relUrl": "/backtothefuture/2020/07/18/tomorrow.html",
            "date": " • Jul 18, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "and-how-was-your-day",
            "content": "was able to get IHP (Interactive Haskell Platform) really easy to &#39;spin-up&#39; an instance on local lan. . currently: . http://192.168.254.76:8000 . got grammas van runing with much less effort that anticipated. .",
            "url": "https://der0pa.github.io/Machine-Learning/Machine-Learning/2020/07/16/and-how-was-your-day.html",
            "relUrl": "/2020/07/16/and-how-was-your-day.html",
            "date": " • Jul 16, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "my-day",
            "content": "Hey-all! we had a really great day... well sort of... my puppy got into some homebrewed cocoa nut oil canna hum,hum, you know! . Jean got measured for glasses at walmart no tring on sample frames... .",
            "url": "https://der0pa.github.io/Machine-Learning/Machine-Learning/ml/pytorch/2020/07/15/my-day.html",
            "relUrl": "/ml/pytorch/2020/07/15/my-day.html",
            "date": " • Jul 15, 2020"
        }
        
    
  
    
  
    
  
    
        ,"post9": {
            "title": "About",
            "content": "# Fastpages Notebook Blog Post &gt; A tutorial of fastpages for Jupyter notebooks. - toc: true - badges: true - comments: true - categories: [jupyter] - image: images/chart-preview.png Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . #hide_input print(&#39;The comment #hide_input was used to hide the code that produced this.&#39;) put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://der0pa.github.io/Machine-Learning/Machine-Learning/2020/02/20/test.html",
            "relUrl": "/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post10": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://der0pa.github.io/Machine-Learning/Machine-Learning/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "about der0pa",
          "content": "retired old man. ha-ha! . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://der0pa.github.io/Machine-Learning/Machine-Learning/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://der0pa.github.io/Machine-Learning/Machine-Learning/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}